# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# This is a simple example for a custom action which utters "Hello World!"

# from typing import Any, Text, Dict, List
#
# from rasa_sdk import Action, Tracker
# from rasa_sdk.executor import CollectingDispatcher
#
#
# class ActionHelloWorld(Action):
#
#     def name(self) -> Text:
#         return "action_hello_world"
#
#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
#
#         dispatcher.utter_message(text="Hello World!")
#
#         return []

import json
import os 
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet

# Base des maladies connues avec pr√©vention
maladies_connues = {
    "paludisme": ["utiliser des moustiquaires", "√©viter les zones √† risque", "prendre des r√©pulsifs"],
    "grippe": ["se laver les mains r√©guli√®rement", "√©viter le contact avec les malades", "vaccination annuelle"],
    "diab√®te": ["avoir une alimentation √©quilibr√©e", "faire du sport r√©guli√®rement", "surveiller sa glyc√©mie"],
    "covid": ["porter un masque dans les lieux publics", "se laver souvent les mains", "vaccination recommand√©e"],
    "tuberculose": ["√©viter les lieux confin√©s avec des malades", "se faire d√©pister", "vaccination BCG"],
    "diarrh√©e": ["Se laver les mains r√©guli√®rement avec de l'eau et du savon (surtout avant de manger et apr√®s √™tre all√© aux toilettes)", "Laver soigneusement les fruits et l√©gumes avant de les consommer", "Boire de l'eau potable (pr√©f√©rer de l'eau filtr√©e, bouillie ou en bouteille scell√©e)", "Bien cuire les aliments (√©viter les viandes/poissons crus ou insuffisamment cuits)", "√âviter les aliments mal conserv√©s ou vendus dans de mauvaises conditions d'hygi√®ne"]
}

class ActionRepondreMaladie(Action):

    def name(self) -> Text:
        return "action_repondre_maladie"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        maladie = next(tracker.get_latest_entity_values("maladie"), None)

        if maladie:
            maladie = maladie.lower()
            if maladie in maladies_connues:
                preventions = ", ".join(maladies_connues[maladie])
                dispatcher.utter_message(text=f"Pour {maladie}, il est conseill√© de consulter un m√©decin. "
                                              f"Voici quelques mesures de pr√©vention : {preventions}.")
            else:
                dispatcher.utter_message(text="Je n'ai pas encore d'informations sur cette maladie. "
                                              "Je suis encore en apprentissage et je prendrai en compte cette nouvelle information pour l'avenir.")
        else:
            dispatcher.utter_message(text="Je n'ai pas encore d'informations sur cette maladie. "
                                              "Je suis encore en apprentissage et je prendrai en compte cette nouvelle information pour l'avenir.")

        return []

    

class ActionPrendreRendezVous(Action):
    def name(self) -> Text:
        return "action_prendre_rendez_vous"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # R√©cup√©ration des slots
        date = tracker.get_slot("date")
        heure = tracker.get_slot("heure")
        user_id = tracker.sender_id

        # Si date ou heure manquante, on demande √† l'utilisateur
        if not date:
            dispatcher.utter_message(text="Pouvez-vous pr√©ciser la date du rendez-vous ?")
            return []
        if not heure:
            dispatcher.utter_message(text="Pouvez-vous pr√©ciser l‚Äôheure du rendez-vous ?")
            return []

        # Lecture du fichier JSON
        rendez_vous_file = "rendez_vous.json"
        if os.path.exists(rendez_vous_file):
            try:
                with open(rendez_vous_file, "r", encoding="utf-8") as f:
                    rendez_vous = json.load(f)
            except json.JSONDecodeError:
                rendez_vous = []
        else:
            rendez_vous = []

        # V√©rifier si un rendez-vous existe d√©j√† pour ce user √† cette date/heure
        for rdv in rendez_vous:
            if rdv["user_id"] == user_id and rdv["date"] == date and rdv["heure"] == heure:
                dispatcher.utter_message(
                    text=f"‚ö†Ô∏è Vous avez d√©j√† un rendez-vous pr√©vu le {date} √† {heure}."
                )
                return []

        # Ajouter le nouveau rendez-vous
        nouveau_rdv = {
            "user_id": user_id,
            "date": date,
            "heure": heure
        }
        rendez_vous.append(nouveau_rdv)

        # Sauvegarde
        with open(rendez_vous_file, "w", encoding="utf-8") as f:
            json.dump(rendez_vous, f, ensure_ascii=False, indent=4)

        dispatcher.utter_message(
            text=f"‚úÖ Votre rendez-vous a √©t√© enregistr√© pour le {date} √† {heure}."
        )

        return [SlotSet("date", date), SlotSet("heure", heure)]
    

class ActionListerRendezVous(Action):
    def name(self) -> Text:
        return "action_lister_rendez_vous"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_id = tracker.sender_id  # identifiant unique de l'utilisateur

        # Charger les rendez-vous depuis le fichier JSON
        try:
            with open("rendez_vous.json", "r", encoding="utf-8") as f:
                rendez_vous = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            rendez_vous = []

        # Filtrer les rendez-vous de cet utilisateur
        mes_rdv = [rdv for rdv in rendez_vous if rdv["user_id"] == user_id]

        if not mes_rdv:
            dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rendez-vous enregistr√©.")
        else:
            rdv_text = "\n".join([f"- {rdv['date']} √† {rdv['heure']}" for rdv in mes_rdv])
            dispatcher.utter_message(text=f"üìÖ Voici vos rendez-vous enregistr√©s :\n{rdv_text}")

        return []
    

class ActionInfoApplication(Action):
    def name(self):
        return "action_info_application"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text=(
            "üìå Cette application permet de :\n"
            "- G√©rer les maladies et leurs sympt√¥mes\n"
            "- Enregistrer des rendez-vous m√©dicaux\n"
            "- Aider les utilisateurs avec des informations de sant√©\n"
            "- Servir de support pour le personnel m√©dical"
        ))
        return []



class ActionDonnerSymptome(Action):
    def name(self) -> Text:
        return "action_donner_symptome"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Ici tu pourrais enregistrer les sympt√¥mes ou proposer un diagnostic
        dispatcher.utter_message(text="Merci pour vos sympt√¥mes. Voulez-vous que je propose un rendez-vous avec un m√©decin ?")
        return []


class ActionDemanderMedicament(Action):
    def name(self) -> Text:
        return "action_demander_medicament"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Ici tu pourrais appeler une base de donn√©es ou API
        dispatcher.utter_message(text="Je peux sugg√©rer du parac√©tamol pour les douleurs et la fi√®vre. Mais consultez un m√©decin avant de prendre un traitement.")
        return []


