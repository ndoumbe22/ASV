# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions

import requests
import json
import os 
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet


# This is a simple example for a custom action which utters "Hello World!"

# from typing import Any, Text, Dict, List
#
# from rasa_sdk import Action, Tracker
# from rasa_sdk.executor import CollectingDispatcher
#
#
# class ActionHelloWorld(Action):
#
#     def name(self) -> Text:
#         return "action_hello_world"
#
#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
#
#         dispatcher.utter_message(text="Hello World!")
#
#         return []

import json
import os 
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet

# Base des maladies connues avec pr√©vention
maladies_connues = {
    "paludisme": ["utiliser des moustiquaires", "√©viter les zones √† risque", "prendre des r√©pulsifs"],
    "grippe": ["se laver les mains r√©guli√®rement", "√©viter le contact avec les malades", "vaccination annuelle"],
    "diab√®te": ["avoir une alimentation √©quilibr√©e", "faire du sport r√©guli√®rement", "surveiller sa glyc√©mie"],
    "covid": ["porter un masque dans les lieux publics", "se laver souvent les mains", "vaccination recommand√©e"],
    "tuberculose": ["√©viter les lieux confin√©s avec des malades", "se faire d√©pister", "vaccination BCG"],
    "diarrh√©e": ["Se laver les mains r√©guli√®rement avec de l'eau et du savon (surtout avant de manger et apr√®s √™tre all√© aux toilettes)", "Laver soigneusement les fruits et l√©gumes avant de les consommer", "Boire de l'eau potable (pr√©f√©rer de l'eau filtr√©e, bouillie ou en bouteille scell√©e)", "Bien cuire les aliments (√©viter les viandes/poissons crus ou insuffisamment cuits)", "√âviter les aliments mal conserv√©s ou vendus dans de mauvaises conditions d'hygi√®ne"]
}

class ActionRepondreMaladie(Action):

    def name(self) -> Text:
        return "action_repondre_maladie"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        maladie = next(tracker.get_latest_entity_values("maladie"), None)

        if maladie:
            maladie = maladie.lower()
            if maladie in maladies_connues:
                preventions = ", ".join(maladies_connues[maladie])
                dispatcher.utter_message(text=f"Pour {maladie}, il est conseill√© de consulter un m√©decin. "
                                              f"Voici quelques mesures de pr√©vention : {preventions}.")
            else:
                dispatcher.utter_message(text="Je n'ai pas encore d'informations sur cette maladie. "
                                              "Je suis encore en apprentissage et je prendrai en compte cette nouvelle information pour l'avenir.")
        else:
            dispatcher.utter_message(text="Je n'ai pas encore d'informations sur cette maladie. "
                                              "Je suis encore en apprentissage et je prendrai en compte cette nouvelle information pour l'avenir.")

        return []

    

class ActionPrendreRendezVous(Action):
    def name(self) -> Text:
        return "action_prendre_rendez_vous"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # R√©cup√©ration des slots
        date = tracker.get_slot("date")
        heure = tracker.get_slot("heure")
        user_id = tracker.sender_id

        # Si date ou heure manquante, on demande √† l'utilisateur
        if not date:
            dispatcher.utter_message(text="Pouvez-vous pr√©ciser la date du rendez-vous ?")
            return []
        if not heure:
            dispatcher.utter_message(text="Pouvez-vous pr√©ciser l‚Äôheure du rendez-vous ?")
            return []

        # Int√©gration avec le backend Django
        try:
            # Make API call to Django backend to create appointment
            django_api_url = "http://localhost:8000/api/rendezvous/"
            appointment_data = {
                "patient": user_id,  # This should be the patient ID in the Django system
                "date": date,
                "heure": heure,
                "statut": "PENDING"
            }
            
            # In a real implementation, you would need to authenticate with the Django API
            # For now, we'll make a POST request without authentication
            response = requests.post(django_api_url, json=appointment_data)
            
            if response.status_code == 201:
                dispatcher.utter_message(
                    text=f"‚úÖ Votre rendez-vous a √©t√© enregistr√© pour le {date} √† {heure}. Il est synchronis√© avec votre compte."
                )
            else:
                # If API call fails, provide an error message
                dispatcher.utter_message(
                    text=f"‚ùå Une erreur s'est produite lors de l'enregistrement de votre rendez-vous. Veuillez r√©essayer plus tard."
                )
        except Exception as e:
            # Handle any exceptions during the API call
            dispatcher.utter_message(
                text=f"‚ùå Une erreur s'est produite lors de la connexion au syst√®me. Veuillez r√©essayer plus tard."
            )

        return [SlotSet("date", date), SlotSet("heure", heure)]
    

class ActionListerRendezVous(Action):
    def name(self) -> Text:
        return "action_lister_rendez_vous"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_id = tracker.sender_id  # identifiant unique de l'utilisateur

        # Make API call to Django backend to get appointments
        try:
            django_api_url = f"http://localhost:8000/api/rendezvous/?patient={user_id}"
            response = requests.get(django_api_url)
            
            if response.status_code == 200:
                rendez_vous = response.json()
                
                # Filter appointments for this user
                mes_rdv = [rdv for rdv in rendez_vous if str(rdv.get("patient")) == user_id]
                
                if not mes_rdv:
                    dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rendez-vous enregistr√© dans le syst√®me.")
                else:
                    rdv_text = "\n".join([f"- {rdv['date']} √† {rdv['heure']}" for rdv in mes_rdv])
                    dispatcher.utter_message(text=f"üìÖ Voici vos rendez-vous enregistr√©s dans le syst√®me :\n{rdv_text}")
            else:
                dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rendez-vous enregistr√© dans le syst√®me.")
        except Exception as e:
            # Handle any exceptions during the API call
            dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rendez-vous enregistr√© dans le syst√®me.")

        return []
    

class ActionInfoApplication(Action):
    def name(self):
        return "action_info_application"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text=(
            "üìå Cette application permet de :\n"
            "- G√©rer les maladies et leurs sympt√¥mes\n"
            "- Enregistrer des rendez-vous m√©dicaux\n"
            "- Aider les utilisateurs avec des informations de sant√©\n"
            "- Servir de support pour le personnel m√©dical"
        ))
        return []



class ActionDonnerSymptome(Action):
    def name(self) -> Text:
        return "action_donner_symptome"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Ici tu pourrais enregistrer les sympt√¥mes ou proposer un diagnostic
        dispatcher.utter_message(text="Merci pour vos sympt√¥mes. Voulez-vous que je propose un rendez-vous avec un m√©decin ?")
        return []


class ActionDemanderMedicament(Action):
    def name(self) -> Text:
        return "action_demander_medicament"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Ici tu pourrais appeler une base de donn√©es ou API
        dispatcher.utter_message(text="Je peux sugg√©rer du parac√©tamol pour les douleurs et la fi√®vre. Mais consultez un m√©decin avant de prendre un traitement.")
        return []


class ActionAjouterRappelMedicament(Action):
    def name(self) -> Text:
        return "action_ajouter_rappel_medicament"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # R√©cup√©ration des slots
        medicament = tracker.get_slot("medicament")
        dosage = tracker.get_slot("dosage")
        heure_rappel = tracker.get_slot("heure")
        frequence = tracker.get_slot("frequence") or "quotidienne"
        user_id = tracker.sender_id

        # Si les informations sont manquantes, on demande √† l'utilisateur
        if not medicament:
            dispatcher.utter_message(text="Quel m√©dicament souhaitez-vous ajouter √† vos rappels ?")
            return []
        if not dosage:
            dispatcher.utter_message(text="Quel est le dosage de ce m√©dicament ?")
            return []
        if not heure_rappel:
            dispatcher.utter_message(text="√Ä quelle heure souhaitez-vous recevoir le rappel ?")
            return []

        # Int√©gration avec le backend Django pour les rappels de m√©dicaments
        try:
            # Make API call to Django backend to create medication reminder
            django_api_url = "http://localhost:8000/api/medication-reminders/"
            reminder_data = {
                "patient": user_id,
                "medicament": medicament,
                "dosage": dosage,
                "heure_rappel": heure_rappel,
                "frequence": frequence,
                "date_debut": "2023-01-01",  # Default start date
                "actif": True
            }
            
            # In a real implementation, you would need to authenticate with the Django API
            response = requests.post(django_api_url, json=reminder_data)
            
            if response.status_code == 201:
                dispatcher.utter_message(
                    text=f"‚úÖ Le rappel pour {medicament} ({dosage}) √† {heure_rappel} a √©t√© enregistr√© avec succ√®s."
                )
            else:
                # If API call fails, provide an error message
                dispatcher.utter_message(
                    text=f"‚ùå Une erreur s'est produite lors de l'enregistrement du rappel. Veuillez r√©essayer plus tard."
                )
        except Exception as e:
            # Handle any exceptions during the API call
            dispatcher.utter_message(
                text=f"‚ùå Une erreur s'est produite lors de la connexion au syst√®me. Veuillez r√©essayer plus tard."
            )

        return [SlotSet("medicament", medicament), SlotSet("dosage", dosage), SlotSet("heure", heure_rappel)]


class ActionListerRappelsMedicament(Action):
    def name(self) -> Text:
        return "action_lister_rappels_medicament"

    async def run(self, dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_id = tracker.sender_id  # identifiant unique de l'utilisateur

        # Make API call to Django backend to get medication reminders
        try:
            django_api_url = f"http://localhost:8000/api/medication-reminders/"
            response = requests.get(django_api_url)
            
            if response.status_code == 200:
                rappels = response.json()
                
                # Filter reminders for this user
                mes_rappels = [rappel for rappel in rappels if str(rappel.get("patient")) == user_id]
                
                if not mes_rappels:
                    dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rappel de m√©dicament enregistr√©.")
                else:
                    rappel_text = "\n".join([f"- {rappel['medicament']} ({rappel['dosage']}) √† {rappel['heure_rappel']}" for rappel in mes_rappels])
                    dispatcher.utter_message(text=f"üíä Voici vos rappels de m√©dicaments :\n{rappel_text}")
            else:
                dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rappel de m√©dicament enregistr√©.")
        except Exception as e:
            # Handle any exceptions during the API call
            dispatcher.utter_message(text="üì≠ Vous n‚Äôavez aucun rappel de m√©dicament enregistr√©.")

        return []